plugins {
    id 'java'
    id 'application'
    id "org.flywaydb.flyway" version "9.8.1"
    id "io.freefair.lombok" version "6.6.2"

}

group 'org.example'
version '1.0-SNAPSHOT'
repositories {
    mavenCentral()
}
ext {
    helidonversion = '3.1.0'
    mainClass='io.helidon.microprofile.cdi.Main'

}
dependencies {
    implementation platform("io.helidon:helidon-dependencies:3.1.0")
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api'
    implementation 'jakarta.inject:jakarta.inject-api'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'jakarta.json.bind:jakarta.json.bind-api'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'jakarta.transaction:jakarta.transaction-api'
    runtimeOnly 'io.helidon.integrations.cdi:helidon-integrations-cdi-hibernate'
    runtimeOnly 'io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld'
    runtimeOnly 'io.helidon.integrations.cdi:helidon-integrations-cdi-datasource-hikaricp'
    runtimeOnly 'io.helidon.integrations.cdi:helidon-integrations-cdi-jpa'
    runtimeOnly 'org.jboss:jandex'
    runtimeOnly 'io.helidon.microprofile.server:helidon-microprofile-server'
    runtimeOnly 'org.glassfish.jersey.media:jersey-media-json-binding'
    runtimeOnly 'io.helidon.microprofile.config:helidon-microprofile-config'
    runtimeOnly 'org.eclipse.microprofile.config:microprofile-config-api'
    runtimeOnly 'org.hibernate.validator:hibernate-validator-cdi'
    runtimeOnly 'org.glassfish:jakarta.el'
    implementation 'io.helidon.microprofile.openapi:helidon-microprofile-openapi'
    implementation 'org.postgresql:postgresql:42.5.1'
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'
    implementation 'io.helidon.microprofile.rest-client:helidon-microprofile-rest-client'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.11.0'
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/distribuida'
    user = 'postgres'
    password = 'postgres'
    schemas = ['public']
}
sourceSets{
    main{
        output.resourcesDir = file("${buildDir}/classes/java/main")
    }
}
task copyLibs(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from configurations.runtimeClasspath
    into 'build/libs/libs'
}
jar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes ('Main-Class': "${project.mainClass}" ,
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}
application {
    mainClass = "${project.mainClass}"
}